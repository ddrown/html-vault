#!/usr/bin/env python3
#
# Copyright (c) 2022, Florian Wesch <fw@dividuum.de>
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import hashlib, textwrap, sys, getpass, json, base64
from html import escape
from Cryptodome.Cipher import AES
from Cryptodome.Random import get_random_bytes

def generate_html(salt, nonce, ciphertext, iterations):
    return textwrap.dedent(u'''
        <!DOCTYPE HTML>
        <html><head>
        <meta http-equiv="Content-Security-Policy" content="default-src 'unsafe-inline' 'self'">
        <meta name="robots" content="noindex"><meta name="referrer" content="no-referrer"><meta charset="utf-8">
        </head><body>
        <!-- This uses https://github.com/dividuum/html-vault -->
        <button onclick='run()'>Open vault..</button><script>
        from_b64 = val => new Uint8Array(atob(val).split('').map(c => c.charCodeAt(0)))
        decrypt = async password => new TextDecoder('utf8').decode(
          await window.crypto.subtle.decrypt({
            name: 'AES-GCM',
            iv: from_b64(vault.nonce),
          }, await crypto.subtle.importKey(
            'raw', await crypto.subtle.deriveBits({
              name: 'PBKDF2',
              hash: 'SHA-256',
              salt: from_b64(vault.salt),
              iterations: vault.iterations,
            }, await crypto.subtle.importKey(
              'raw', new TextEncoder('utf-8').encode(password), 'PBKDF2', false, ['deriveBits']
            ), 256), 'AES-GCM', false, ['decrypt']
          ), from_b64(vault.ciphertext))
        )
        run = async () => {
          try {
            const password = prompt('Password')
            const plain = await decrypt(password)
            delete vault
            document.open(); document.write(plain); document.close()
          } catch(e) {
            console.log(e); alert('Nope')
          }
        }
        vault = %s
        </script>
    ''').strip() % json.dumps(dict(
        salt = base64.b64encode(salt).decode('utf-8'),
        nonce = base64.b64encode(nonce).decode('utf-8'),
        ciphertext = base64.b64encode(ciphertext).decode('utf-8'),
        iterations = iterations,
    ), sort_keys=True, indent=2)

def create_html(plain, password, iterations=5*1000*1000):
    salt = get_random_bytes(32)
    dk = hashlib.pbkdf2_hmac('sha256', password, salt, iterations)
    cipher = AES.new(dk, AES.MODE_GCM)
    ciphertext, tag = cipher.encrypt_and_digest(plain.encode('utf-8'))
    return generate_html(salt, cipher.nonce, ciphertext+tag, iterations)

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("%s <input-file> <output-html-file> [passphrase]" % sys.argv[0])
        sys.exit(1)
    plain = open(sys.argv[1]).read()
    if plain and plain[0] != '<':
        plain = '<pre>' + escape(plain) # bit of hack: use <pre> for non-HTML
    password = len(sys.argv) == 4 and sys.argv[3] or getpass.getpass('Password: ')
    if isinstance(password, bytes):
        password = password.decode(sys.stdin.encoding)
    if len(password) < 8:
        print("That's not a good password. Use at least 8 characters!")
        sys.exit(1)
    password = password.encode('utf-8')
    print("Encrypting... (this might take a moment)")
    with open(sys.argv[2], 'wb') as out:
        out.write(create_html(plain, password).encode('utf-8'))
